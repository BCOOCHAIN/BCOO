{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"bs58","disambiguator":[2293428209375299011,16946114091509520247]},"crate_root":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src","external_crates":[{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[451015332518386345,12616910850237566401]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[16746868065623213498,9074085878651121975]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11691455356848847772,13404935376487248212]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7539909478603523759,1507731599405122440]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[10865508162509001456,833405817713000449]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12627880532723991922,9080356613218334855]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15184984254005438421,13421964498468238256]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[5844413487463745628,10504756031280733323]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8019,"line_start":1,"line_end":233,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9315,"byte_end":9326,"line_start":3,"line_end":3,"column_start":16,"column_end":27},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":18}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2610,"byte_end":2620,"line_start":90,"line_end":90,"column_start":19,"column_end":29},"alias_span":null,"name":"FromBase58","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2622,"byte_end":2630,"line_start":90,"line_end":90,"column_start":31,"column_end":39},"alias_span":null,"name":"ToBase58","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8019,"line_start":1,"line_end":233,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":18},{"krate":0,"index":36},{"krate":0,"index":56},{"krate":0,"index":70},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":112},{"krate":0,"index":114}],"decl_id":null,"docs":" Another [Base58][] codec implementation.","sig":null,"attributes":[{"value":"warn(missing_copy_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":38,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"warn(missing_debug_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":39,"byte_end":78,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"warn(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":79,"byte_end":101,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"warn(trivial_casts)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":102,"byte_end":125,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"warn(trivial_numeric_casts)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":126,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"warn(unused_extern_crates)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":158,"byte_end":188,"line_start":6,"line_end":6,"column_start":1,"column_end":31}},{"value":"warn(unused_import_braces)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":189,"byte_end":219,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"warn(unused_results)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":220,"byte_end":244,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"warn(variant_size_differences)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":245,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"allow(unknown_lints)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":281,"byte_end":305,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"allow(renamed_and_removed_lints)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":320,"byte_end":356,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"allow(const_static_lifetime)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":391,"byte_end":423,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"allow(redundant_field_names)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":439,"byte_end":471,"line_start":15,"line_end":15,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alphabet","qualname":"::alphabet","value":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\alphabet.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16}],"decl_id":null,"docs":" Commonly used Base58 alphabets.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":8280,"byte_end":8287,"line_start":7,"line_end":7,"column_start":11,"column_end":18},"name":"BITCOIN","qualname":"::alphabet::BITCOIN","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Bitcoin's alphabet as defined in their Base58Check encoding.","sig":null,"attributes":[{"value":"allow(doc_markdown)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":8058,"byte_end":8080,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":10},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":8548,"byte_end":8554,"line_start":13,"line_end":13,"column_start":11,"column_end":17},"name":"MONERO","qualname":"::alphabet::MONERO","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Monero's alphabet as defined in this forum post.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":8748,"byte_end":8754,"line_start":19,"line_end":19,"column_start":11,"column_end":17},"name":"RIPPLE","qualname":"::alphabet::RIPPLE","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Ripple's alphabet as defined in their wiki.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":14},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":8989,"byte_end":8995,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"FLICKR","qualname":"::alphabet::FLICKR","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Flickr's alphabet for creating short urls from photo ids.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":16},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,97,108,112,104,97,98,101,116,46,114,115],"byte_start":9209,"byte_end":9216,"line_start":30,"line_end":30,"column_start":11,"column_end":18},"name":"DEFAULT","qualname":"::alphabet::DEFAULT","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" The default alphabet used if none is given. Currently is the\n [`BITCOIN`](constant.BITCOIN.html) alphabet.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\decode.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":34}],"decl_id":null,"docs":" Functions for decoding Base58 encoded strings.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9574,"byte_end":9587,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"DecodeBuilder","qualname":"::decode::DecodeBuilder","value":"DecodeBuilder {  }","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":39},{"krate":0,"index":41}],"decl_id":null,"docs":" A builder for setting up the alphabet and output of a base58 decode.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9523,"byte_end":9562,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9919,"byte_end":9922,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeBuilder<'a, I>>::new","value":"fn (input: I, alpha: &'a [u8; 58]) -> DecodeBuilder<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup decoder for the given string using the given alphabet.\n Preferably use [`bs58::decode`](../fn.decode.html) instead of this\n directly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":10499,"byte_end":10512,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"with_alphabet","qualname":"<DecodeBuilder<'a, I>>::with_alphabet","value":"fn <'b> (self, alpha: &'b [u8; 58]) -> DecodeBuilder<'b, I>","parent":null,"children":[],"decl_id":null,"docs":" Change the alphabet that will be used for decoding.","sig":null,"attributes":[{"value":"allow(needless_lifetimes)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":10414,"byte_end":10442,"line_start":36,"line_end":36,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":11968,"byte_end":11976,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<DecodeBuilder<'a, I>>::into_vec","value":"fn (self) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode into a new vector of bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":12806,"byte_end":12810,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"into","qualname":"<DecodeBuilder<'a, I>>::into","value":"fn <O> (self, mut output: O) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode into the given buffer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":14069,"byte_end":14080,"line_start":151,"line_end":151,"column_start":8,"column_end":19},"name":"decode_into","qualname":"::decode::decode_into","value":"fn (input: &[u8], output: &mut [u8], alpha: &[u8; 58]) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode given string into given byte slice using the given alphabet.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bs58-0.2.2\\src\\encode.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":52},{"krate":0,"index":54}],"decl_id":null,"docs":" Functions for encoding into Base58 encoded strings.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":19274,"byte_end":19287,"line_start":7,"line_end":7,"column_start":12,"column_end":25},"name":"EncodeBuilder","qualname":"::encode::EncodeBuilder","value":"EncodeBuilder {  }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":71}],"decl_id":null,"docs":" A builder for setting up the alphabet and output of a base58 encode.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":19223,"byte_end":19262,"line_start":6,"line_end":6,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":19590,"byte_end":19593,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodeBuilder<'a, I>>::new","value":"fn (input: I, alpha: &'a [u8; 58]) -> EncodeBuilder<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup encoder for the given string using the given alphabet.\n Preferably use [`bs58::encode`](../fn.encode.html) instead of this\n directly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":20166,"byte_end":20179,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"with_alphabet","qualname":"<EncodeBuilder<'a, I>>::with_alphabet","value":"fn <'b> (self, alpha: &'b [u8; 58]) -> EncodeBuilder<'b, I>","parent":null,"children":[],"decl_id":null,"docs":" Change the alphabet that will be used for encoding.","sig":null,"attributes":[{"value":"allow(needless_lifetimes)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":20081,"byte_end":20109,"line_start":33,"line_end":33,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":21246,"byte_end":21257,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"into_string","qualname":"<EncodeBuilder<'a, I>>::into_string","value":"fn (self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encode into a new owned string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":22020,"byte_end":22024,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"into","qualname":"<EncodeBuilder<'a, I>>::into","value":"fn (self, output: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encode into the given string, any existing data will be cleared.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":23037,"byte_end":23048,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"encode_into","qualname":"::encode::encode_into","value":"fn (input: &[u8], output: &mut String, alpha: &[u8; 58]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encode given bytes into given string using the given alphabet, any existing\n data will be cleared.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":105},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26233,"byte_end":26247,"line_start":11,"line_end":11,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::error::DecodeError::BufferTooSmall","value":"DecodeError::BufferTooSmall","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" The output buffer was too small to contain the entire input.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":107},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26352,"byte_end":26368,"line_start":15,"line_end":15,"column_start":5,"column_end":21},"name":"InvalidCharacter","qualname":"::error::DecodeError::InvalidCharacter","value":"DecodeError::InvalidCharacter { character, index }","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" The input contained a character that was not part of the current Base58\n alphabet.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":113},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26657,"byte_end":26674,"line_start":24,"line_end":24,"column_start":5,"column_end":22},"name":"NonAsciiCharacter","qualname":"::error::DecodeError::NonAsciiCharacter","value":"DecodeError::NonAsciiCharacter { index }","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" The input contained a multi-byte (or non-utf8) character which is\n unsupported by this Base58 decoder.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":117},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":27476,"byte_end":27491,"line_start":53,"line_end":53,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::DecodeError::__NonExhaustive","value":"DecodeError::__NonExhaustive","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26146,"byte_end":26157,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::error::DecodeError","value":"DecodeError::{BufferTooSmall, InvalidCharacter, NonAsciiCharacter, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":113},{"krate":0,"index":117}],"decl_id":null,"docs":" Errors that could occur when decoding a Base58 encoded string.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26137,"byte_end":27494,"line_start":9,"line_end":54,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":26137,"byte_end":27494,"line_start":9,"line_end":54,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30234,"byte_end":30242,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ToBase58","qualname":"::traits::ToBase58","value":"ToBase58","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" A trait for Base58 encoding bytes to an owned string.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30085,"byte_end":30105,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.2.0\",\n             note = \"Use `bs58::encode` and associated functions instead\")","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30106,"byte_end":30208,"line_start":6,"line_end":9,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30399,"byte_end":30408,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"to_base58","qualname":"::traits::ToBase58::to_base58","value":"fn (&self) -> String","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Base58 encode `self` to an owned string using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30509,"byte_end":30532,"line_start":18,"line_end":18,"column_start":8,"column_end":31},"name":"to_base58_with_alphabet","qualname":"::traits::ToBase58::to_base58_with_alphabet","value":"fn (&self, alpha: &[u8; 58]) -> String","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Base58 encode `self` to an owned string using the given alphabet.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30790,"byte_end":30800,"line_start":28,"line_end":28,"column_start":11,"column_end":21},"name":"FromBase58","qualname":"::traits::FromBase58","value":"FromBase58","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90}],"decl_id":null,"docs":" A trait for decoding Base58 encoded values to a vector of bytes.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30641,"byte_end":30661,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.2.0\",\n             note = \"Use `bs58::decode` and associated functions instead\")","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30662,"byte_end":30764,"line_start":23,"line_end":26,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":30952,"byte_end":30963,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"from_base58","qualname":"::traits::FromBase58::from_base58","value":"fn (&self) -> Result<Vec<u8>, DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Decode `self` to a vector of bytes using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,116,114,97,105,116,115,46,114,115],"byte_start":31081,"byte_end":31106,"line_start":35,"line_end":35,"column_start":8,"column_end":33},"name":"from_base58_with_alphabet","qualname":"::traits::FromBase58::from_base58_with_alphabet","value":"fn (&self, alpha: &[u8; 58]) -> Result<Vec<u8>, DecodeError>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Decode `self` to a vector of bytes using the given alphabet.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4301,"byte_end":4307,"line_start":155,"line_end":155,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn <I> (input: I) -> decode::DecodeBuilder<'static, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup decoder for the given string using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5295,"byte_end":5301,"line_start":191,"line_end":191,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn <I> (input: I) -> encode::EncodeBuilder<'static, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup encoder for the given bytes using the [default alphabet][].","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9723,"byte_end":9736,"line_start":17,"line_end":17,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":19394,"byte_end":19407,"line_start":13,"line_end":13,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":27511,"byte_end":27522,"line_start":56,"line_end":56,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":28600,"byte_end":28611,"line_start":79,"line_end":79,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2472,"byte_end":2480,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2491,"byte_end":2497,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2507,"byte_end":2513,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":36}}],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,100,101,99,111,100,101,46,114,115],"byte_start":9723,"byte_end":9736,"line_start":17,"line_end":17,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,110,99,111,100,101,46,114,115],"byte_start":19394,"byte_end":19407,"line_start":13,"line_end":13,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":27511,"byte_end":27522,"line_start":56,"line_end":56,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":116},"to":{"krate":1,"index":2338}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,98,115,53,56,45,48,46,50,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":28600,"byte_end":28611,"line_start":79,"line_end":79,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":116},"to":{"krate":2,"index":7838}}]}