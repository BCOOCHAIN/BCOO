{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"ipnetwork","disambiguator":[2848521954617212982,8439889242096749786]},"crate_root":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src","external_crates":[{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[451015332518386345,12616910850237566401]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[16746868065623213498,9074085878651121975]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11691455356848847772,13404935376487248212]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7539909478603523759,1507731599405122440]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[10865508162509001456,833405817713000449]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12627880532723991922,9080356613218334855]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15184984254005438421,13421964498468238256]}},{"file_name":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[5844413487463745628,10504756031280733323]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":6923,"line_start":1,"line_end":222,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":698,"byte_end":709,"line_start":26,"line_end":26,"column_start":16,"column_end":27},"alias_span":null,"name":"Ipv4Network","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":711,"byte_end":730,"line_start":26,"line_end":26,"column_start":29,"column_end":48},"alias_span":null,"name":"ipv4_mask_to_prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":748,"byte_end":759,"line_start":27,"line_end":27,"column_start":16,"column_end":27},"alias_span":null,"name":"Ipv6Network","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":761,"byte_end":780,"line_start":27,"line_end":27,"column_start":29,"column_end":48},"alias_span":null,"name":"ipv6_mask_to_prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":799,"byte_end":813,"line_start":28,"line_end":28,"column_start":17,"column_end":31},"alias_span":null,"name":"IpNetworkError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":6923,"line_start":1,"line_end":222,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\luhuimao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ipnetwork-0.12.8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":76},{"krate":0,"index":126},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":160},{"krate":0,"index":166},{"krate":0,"index":312},{"krate":0,"index":350},{"krate":0,"index":346},{"krate":0,"index":344},{"krate":0,"index":340},{"krate":0,"index":334},{"krate":0,"index":330},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":168},{"krate":0,"index":184},{"krate":0,"index":190},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":206}],"decl_id":null,"docs":" The `ipnetwork` crate provides a set of APIs to work with IP CIDRs in\n Rust. Implementation for IPv4 is more or less stable, IPv6 implementation\n is still WIP.\n","sig":null,"attributes":[{"value":"crate_type = \"lib\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":382,"byte_end":404,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7294,"byte_end":7305,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"Ipv4Network","qualname":"::ipv4::Ipv4Network","value":"Ipv4Network {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":39}],"decl_id":null,"docs":" Represents a network range where the IP addresses are of v4\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7283,"byte_end":7345,"line_start":12,"line_end":15,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7283,"byte_end":7345,"line_start":12,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7569,"byte_end":7572,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<Ipv4Network>::new","value":"fn (addr: Ipv4Addr, prefix: u8) -> Result<Ipv4Network, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Ipv4Network` from any `Ipv4Addr` and a prefix denoting the network size.\n If the prefix is larger than 32 this will return an `IpNetworkError::InvalidPrefix`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":8066,"byte_end":8070,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"iter","qualname":"<Ipv4Network>::iter","value":"fn (&self) -> Ipv4NetworkIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `Ipv4Network`. Each call to `next` will return the next\n `Ipv4Addr` in the given network. `None` will be returned when there are no more\n addresses.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":8305,"byte_end":8307,"line_start":43,"line_end":43,"column_start":12,"column_end":14},"name":"ip","qualname":"<Ipv4Network>::ip","value":"fn (&self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":8365,"byte_end":8371,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"prefix","qualname":"<Ipv4Network>::prefix","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":8815,"byte_end":8819,"line_start":63,"line_end":63,"column_start":12,"column_end":16},"name":"mask","qualname":"<Ipv4Network>::mask","value":"fn (&self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":" Returns the mask for this `Ipv4Network`.\n That means the `prefix` most significant bits will be 1 and the rest 0","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":9392,"byte_end":9399,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"network","qualname":"<Ipv4Network>::network","value":"fn (&self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of the network denoted by this `Ipv4Network`.\n This means the lowest possible IPv4 address inside of the network.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":9963,"byte_end":9972,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<Ipv4Network>::broadcast","value":"fn (&self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":" Returns the broadcasting address of this `Ipv4Network`.\n This means the highest possible IPv4 address inside of the network.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":10527,"byte_end":10535,"line_start":117,"line_end":117,"column_start":12,"column_end":20},"name":"contains","qualname":"<Ipv4Network>::contains","value":"fn (&self, ip: Ipv4Addr) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if a given `Ipv4Addr` is in this `Ipv4Network`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":11134,"byte_end":11138,"line_start":137,"line_end":137,"column_start":12,"column_end":16},"name":"size","qualname":"<Ipv4Network>::size","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns number of possible host addresses in this `Ipv4Network`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":11949,"byte_end":11952,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"nth","qualname":"<Ipv4Network>::nth","value":"fn (&self, n: u32) -> Option<Ipv4Addr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `n`:th address within this network.\n The adresses are indexed from 0 and `n` must be smaller than the size of the network.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13246,"byte_end":13265,"line_start":207,"line_end":207,"column_start":12,"column_end":31},"name":"Ipv4NetworkIterator","qualname":"::ipv4::Ipv4NetworkIterator","value":"Ipv4NetworkIterator {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13748,"byte_end":13767,"line_start":228,"line_end":228,"column_start":8,"column_end":27},"name":"ipv4_mask_to_prefix","qualname":"::ipv4::ipv4_mask_to_prefix","value":"fn (mask: Ipv4Addr) -> Result<u8, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Ipv4Addr` network mask into a prefix.\n If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21096,"byte_end":21107,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Ipv6Network","qualname":"::ipv6::Ipv6Network","value":"Ipv6Network {  }","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" Represents a network range where the IP addresses are of v6\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21085,"byte_end":21147,"line_start":14,"line_end":17,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21085,"byte_end":21147,"line_start":14,"line_end":17,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21372,"byte_end":21375,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<Ipv6Network>::new","value":"fn (addr: Ipv6Addr, prefix: u8) -> Result<Ipv6Network, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Ipv6Network` from any `Ipv6Addr` and a prefix denoting the network size.\n If the prefix is larger than 128 this will return an `IpNetworkError::InvalidPrefix`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":23665,"byte_end":23667,"line_start":92,"line_end":92,"column_start":12,"column_end":14},"name":"ip","qualname":"<Ipv6Network>::ip","value":"fn (&self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":23725,"byte_end":23731,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"prefix","qualname":"<Ipv6Network>::prefix","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":24191,"byte_end":24195,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"mask","qualname":"<Ipv6Network>::mask","value":"fn (&self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":" Returns the mask for this `Ipv6Network`.\n That means the `prefix` most significant bits will be 1 and the rest 0","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":25036,"byte_end":25044,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"contains","qualname":"<Ipv6Network>::contains","value":"fn (&self, ip: Ipv6Addr) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if a given `Ipv6Addr` is in this `Ipv6Network`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":27289,"byte_end":27308,"line_start":216,"line_end":216,"column_start":8,"column_end":27},"name":"ipv6_mask_to_prefix","qualname":"::ipv6::ipv6_mask_to_prefix","value":"fn (mask: Ipv6Addr) -> Result<u8, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Ipv6Addr` network mask into a prefix.\n If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":65},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33680,"byte_end":33691,"line_start":8,"line_end":8,"column_start":5,"column_end":16},"name":"InvalidAddr","qualname":"::common::IpNetworkError::InvalidAddr","value":"IpNetworkError::InvalidAddr(String)","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":69},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33705,"byte_end":33718,"line_start":9,"line_end":9,"column_start":5,"column_end":18},"name":"InvalidPrefix","qualname":"::common::IpNetworkError::InvalidPrefix","value":"IpNetworkError::InvalidPrefix","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":71},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33724,"byte_end":33741,"line_start":10,"line_end":10,"column_start":5,"column_end":22},"name":"InvalidCidrFormat","qualname":"::common::IpNetworkError::InvalidCidrFormat","value":"IpNetworkError::InvalidCidrFormat(String)","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":292},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33659,"byte_end":33673,"line_start":7,"line_end":7,"column_start":10,"column_end":24},"name":"IpNetworkError","qualname":"::common::IpNetworkError","value":"IpNetworkError::{InvalidAddr, InvalidPrefix, InvalidCidrFormat}","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" Represents a bunch of errors that can occur while working with a `IpNetwork`\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33650,"byte_end":33752,"line_start":7,"line_end":11,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":75},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1078,"byte_end":1080,"line_start":35,"line_end":35,"column_start":5,"column_end":7},"name":"V4","qualname":"::IpNetwork::V4","value":"IpNetwork::V4(Ipv4Network)","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1099,"byte_end":1101,"line_start":36,"line_end":36,"column_start":5,"column_end":7},"name":"V6","qualname":"::IpNetwork::V6","value":"IpNetwork::V6(Ipv6Network)","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":312},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1062,"byte_end":1071,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"name":"IpNetwork","qualname":"::IpNetwork","value":"IpNetwork::{V4, V6}","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":79}],"decl_id":null,"docs":" Represents a generic network range. This type can have two variants:\n the v4 and the v6 case.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1053,"byte_end":1117,"line_start":34,"line_end":37,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1053,"byte_end":1117,"line_start":34,"line_end":37,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1428,"byte_end":1431,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<IpNetwork>::new","value":"fn (ip: IpAddr, prefix: u8) -> Result<IpNetwork, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `IpNetwork` from a given `IpAddr` and a prefix denoting the\n network size. If the prefix is larger than 32 (for IPv4) or 128 (for IPv6), this\n will raise an `IpNetworkError::InvalidPrefix` error. Support for IPv6 is not\n complete yet.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1749,"byte_end":1751,"line_start":52,"line_end":52,"column_start":12,"column_end":14},"name":"ip","qualname":"<IpNetwork>::ip","value":"fn (&self) -> IpAddr","parent":null,"children":[],"decl_id":null,"docs":" Returns the IP part of a given `IpNetwork`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2241,"byte_end":2247,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IpNetwork>::prefix","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the prefix of the given `IpNetwork`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2948,"byte_end":2952,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"mask","qualname":"<IpNetwork>::mask","value":"fn (&self) -> IpAddr","parent":null,"children":[],"decl_id":null,"docs":" Returns the mask for this `IpNetwork`.\n That means the `prefix` most significant bits will be 1 and the rest 0","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3513,"byte_end":3520,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"is_ipv4","qualname":"<IpNetwork>::is_ipv4","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the IP in this `IpNetwork` is a valid IPv4 address,\n false if it's a valid IPv6 address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4038,"byte_end":4045,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"is_ipv6","qualname":"<IpNetwork>::is_ipv6","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the IP in this `IpNetwork` is a valid IPv6 address,\n false if it's a valid IPv4 address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4713,"byte_end":4721,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"contains","qualname":"<IpNetwork>::contains","value":"fn (&self, ip: IpAddr) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if a given `IpAddr` is in this `IpNetwork`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6725,"byte_end":6742,"line_start":217,"line_end":217,"column_start":8,"column_end":25},"name":"ip_mask_to_prefix","qualname":"::ip_mask_to_prefix","value":"fn (mask: IpAddr) -> Result<u8, IpNetworkError>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `IpAddr` network mask into a prefix.\n If the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7352,"byte_end":7363,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":12196,"byte_end":12207,"line_start":169,"line_end":169,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":12756,"byte_end":12767,"line_start":188,"line_end":188,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13093,"byte_end":13104,"line_start":198,"line_end":198,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13318,"byte_end":13337,"line_start":212,"line_end":212,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21154,"byte_end":21165,"line_start":19,"line_end":19,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":25987,"byte_end":25998,"line_start":167,"line_end":167,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":26408,"byte_end":26419,"line_start":178,"line_end":178,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":27009,"byte_end":27020,"line_start":208,"line_end":208,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33776,"byte_end":33790,"line_start":13,"line_end":13,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":34149,"byte_end":34163,"line_start":24,"line_end":24,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1124,"byte_end":1133,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5493,"byte_end":5502,"line_start":172,"line_end":172,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5904,"byte_end":5913,"line_start":185,"line_end":185,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6022,"byte_end":6031,"line_start":191,"line_end":191,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6135,"byte_end":6144,"line_start":197,"line_end":197,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6382,"byte_end":6391,"line_start":206,"line_end":206,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":7352,"byte_end":7363,"line_start":17,"line_end":17,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":12196,"byte_end":12207,"line_start":169,"line_end":169,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":208},"to":{"krate":2,"index":7838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":12756,"byte_end":12767,"line_start":188,"line_end":188,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":208},"to":{"krate":2,"index":6650}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13093,"byte_end":13104,"line_start":198,"line_end":198,"column_start":25,"column_end":36},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":208},"to":{"krate":2,"index":2562}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,52,46,114,115],"byte_start":13318,"byte_end":13337,"line_start":212,"line_end":212,"column_start":19,"column_end":38},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":66},"to":{"krate":2,"index":3846}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":21154,"byte_end":21165,"line_start":19,"line_end":19,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":25987,"byte_end":25998,"line_start":167,"line_end":167,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":6650}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":26408,"byte_end":26419,"line_start":178,"line_end":178,"column_start":25,"column_end":36},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":2562}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,105,112,118,54,46,114,115],"byte_start":27009,"byte_end":27020,"line_start":208,"line_end":208,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":7838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":33776,"byte_end":33790,"line_start":13,"line_end":13,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":292},"to":{"krate":2,"index":7838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,99,111,109,109,111,110,46,114,115],"byte_start":34149,"byte_end":34163,"line_start":24,"line_end":24,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":292},"to":{"krate":1,"index":2338}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1124,"byte_end":1133,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5493,"byte_end":5502,"line_start":172,"line_end":172,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":6650}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5904,"byte_end":5913,"line_start":185,"line_end":185,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":2562}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6022,"byte_end":6031,"line_start":191,"line_end":191,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":2562}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6135,"byte_end":6144,"line_start":197,"line_end":197,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":2562}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,108,117,104,117,105,109,97,111,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,112,110,101,116,119,111,114,107,45,48,46,49,50,46,56,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6382,"byte_end":6391,"line_start":206,"line_end":206,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":312},"to":{"krate":2,"index":7838}}]}